<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Controller create event started")

alarm[0] = room_speed * 3

show_debug_message("Running client side")
global.socket = network_create_socket(network_socket_tcp)
show_debug_message("Creating socket ="+string(global.socket))
global.ip_addr_rx = "192.168.1.21"
// create network buffer for sent messages
show_debug_message("Creating transmit buffer")
tx_buff = buffer_create( 256, buffer_grow, 1)
connected = false

// ip_query_id = get_string_async("What is server ip address?",global.ip_addr_rx)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>break;
show_debug_message("Sending networking buffer")
buffer_seek(tx_buff, buffer_seek_start, 0)
buffer_write(tx_buff, buffer_string, "Test from player 2")
network_send_packet( global.socket, tx_buff, buffer_tell(tx_buff) )
// network_send_broadcast(global.rx_socket, 6511, tx_buff, buffer_tell(tx_buff))
alarm[0]=room_speed*3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>break;

// https://www.yoyogames.com/tech_blog/11 for tutorial

show_debug_message("networking event occurred")

var socket_id = ds_map_find_value( async_load, "id" )
var network_event_type = ds_map_find_value(async_load, "type")
var port = ds_map_find_value(async_load, "port")
var ip_addr_rx = ds_map_find_value(async_load, "ip")
var rx_buff = ds_map_find_value(async_load, "buffer")
show_debug_message("Packet received from ip ="+string(ip_addr_rx)+", socket id ="+string(socket_id)+", port ="+string(port))

if network_event_type == network_type_connect
{
    show_debug_message("Network type connect received")
    global.socket = ds_map_find_value(async_load, "socket")
    connected = true
}
else // if socket_id == global.socket // my socket
{
    if is_undefined(rx_buff)
    {
        show_debug_message("Packet contents undefined")
    }
    else
    {
        show_debug_message("My socket ="+string(global.socket)+"Packet contents ="+string(buffer_read(rx_buff, buffer_string)))
        show_debug_message("Sending networking buffer")
        buffer_seek(tx_buff, buffer_seek_start, 0)
        buffer_write(tx_buff, buffer_string, "Acknowledged by server")
        network_send_packet(global.socket, tx_buff, buffer_tell(tx_buff))    
    }
}
// else // not my socket
 //{
 //   show_debug_message("Not my socket, my socket ="+string(global.socket))
// }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if i_d == ip_query_id
   {
   if ds_map_find_value(async_load, "status")
      {
      if ds_map_find_value(async_load, "result") != ""
         {
         show_debug_message("dialog has result")
         global.ip_addr_rx = ds_map_find_value(async_load, "result");
         // start listening for network traffic
         network_connect( global.socket, global.ip_addr_rx, 6511 )

         }
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
