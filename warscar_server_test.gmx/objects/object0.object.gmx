<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug_message("Controller create event started")

alarm[0] = room_speed * 3

show_debug_message("Running server side")
global.socket_server = network_create_server(network_socket_tcp, 6511, 3)
show_debug_message("Creating server socket ="+string(global.socket_server))
global.ip_addr_server = "127.0.0.1" // on server the server is local
global.socket_client = network_create_socket(network_socket_tcp)
show_debug_message("Creating local client socket ="+string(global.socket_client))
network_connect(global.socket_client, global.ip_addr_server, 6511)
connected = false // this is related to remote connection
// create network buffer for sent messages
show_debug_message("Creating transmit buffer")
tx_buff_server = buffer_create( 256, buffer_grow, 1)
tx_buff_client = buffer_create( 256, buffer_grow, 1)

p1_x = room0.room_width/4
p1_y = room0.room_height/2
p2_x = room0.room_width/2
p2_y = room0.room_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if gamepad_button_check(1, gp_padd) then p1_y += 8
if gamepad_button_check(1, gp_padu) then p1_y -= 8
if gamepad_button_check(1, gp_padr) then p1_x += 8
if gamepad_button_check(1, gp_padl) then p1_x -= 8

if p1_x &lt; 0 then p1_x = room0.room_width
if p1_x &gt; room0.room_width then p1_x = 0
if p1_y &lt; 0 then p1_y = room0.room_height
if p1_y &gt; room0.room_height then p1_y = 0

buffer_seek(tx_buff_client, buffer_seek_start, 0)
buffer_write(tx_buff_client, buffer_u8, 1) // joystick packet
buffer_write(tx_buff_client, buffer_s32, p1_x)
buffer_write(tx_buff_client, buffer_s32, p1_y)
network_send_packet( global.socket_client, tx_buff_client, buffer_tell(tx_buff_client) )

with object1
{
    x = other.p1_x
    y = other.p1_y
}

with object2
{
    x = other.p2_x
    y = other.p2_y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>break;

// https://www.yoyogames.com/tech_blog/11 for tutorial

// show_debug_message("networking event occurred")

var socket_id = ds_map_find_value( async_load, "id" )
var network_event_type = ds_map_find_value(async_load, "type")
var port = ds_map_find_value(async_load, "port")
var ip_addr_rx = ds_map_find_value(async_load, "ip")
var rx_buff = ds_map_find_value(async_load, "buffer")
//show_debug_message("Packet received from ip ="+string(ip_addr_rx)+", event id ="+string(socket_id)+", port ="+string(port))

if network_event_type == network_type_connect
{
    added_socket_id = ds_map_find_value(async_load, "socket")
    global.socket_client = added_socket_id
    show_debug_message("Network type connect received on socket = "+string(added_socket_id))
    connected = true
}
else if network_event_type == network_type_disconnect
{
    show_debug_message("Network disconnected")
    connected = false
}
else if ip_addr_rx == global.ip_addr_server // local
{
    if is_undefined(rx_buff)
    {
        show_debug_message("Packet contents undefined")
    }
    else
    {
        packet_type = buffer_read(rx_buff, buffer_u8)
        if packet_type == 1 // joystick inputs
        {
            p1_x = buffer_read(rx_buff, buffer_s32)
            p1_y = buffer_read(rx_buff, buffer_s32)
        }
        else // unrecognized packet type
        {
            show_debug_message("Unrecognized packet type")
        }
    }
}
else // from remote
{
    if is_undefined(rx_buff)
    {
        show_debug_message("Packet contents undefined")
    }
    else
    {
        packet_type = buffer_read(rx_buff, buffer_u8)
        if packet_type == 1 // joystick inputs
        {
            p2_x = buffer_read(rx_buff, buffer_s32)
            p2_y = buffer_read(rx_buff, buffer_s32)
        }
        else // unrecognized packet type
        {
            show_debug_message("Unrecognized packet type")
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if i_d == ip_query_id
   {
   if ds_map_find_value(async_load, "status")
      {
      if ds_map_find_value(async_load, "result") != ""
         {
         show_debug_message("dialog has result")
         global.ip_addr_rx = ds_map_find_value(async_load, "result");
         // start listening for network traffic
         network_connect( global.socket, global.ip_addr_rx, 6511 )

         }
      }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
